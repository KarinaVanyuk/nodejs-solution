swagger: '2.0'
info:
  description: 'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.'
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache-2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: posts
    description: Everything about Posts
  - name: users
    description: Operations about user
schemes:
  - http
paths:
  /posts:
    get:
      tags:
      - posts
      summary: Get posts
      consumes:
      - application/json
      responses:
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/post'
        400:
          description: 'Invalid status value'
    post:
      tags:
      - posts
      summary: Add a new post
      consumes:
      - application/json
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/post'
      responses:
        200:
          description: Success
        400:
          description: Invalid status value
    put:
        tags:
         - posts
        summary: Update post
        consumes:
        - application/json
        produces:
        - application/xml
        - application/json
        parameters:
        - in: body
          name: body
          description: Post object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/post'
        responses:
          200:
            description: Success
          400:
            description: Invalid status value
  /posts/{postId}:
    get:
      tags:
      - posts
      summary: Get post by id
      consumes:
      - application/json
      parameters:
      - name: postId
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            items:
              $ref: '#/definitions/post'
        400:
          description: 'Invalid status value'
    delete:
      tags:
      - posts
      summary: Delete post
      consumes:
      - application/json
      parameters:
      - name: postId
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
        400:
          description: 'Invalid status value'
  /users:
    get:
      tags:
      - users
      summary: Get all users
      consumes:
      - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        400:
          description: 'Invalid status value'
  /users/{userId}:
    get:
      tags:
      -  users
      summary: Get user by id
      produces:
      -  application/json
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        400:
          description: 'Invalid status value'
    delete:
      tags:
      -  users
      summary: Delete user by id
      produces:
      -  application/json
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        400:
          description: 'Invalid status value'
    put:
      tags:
      - users
      summary: Update user info
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - in:  body
        name:  body
        description: User object for update
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        400:
          description: 'Invalid status value'
definitions:
  post:
   properties:
    postId:
      type: string
    userID:
      type: string
    title:
      type: string
    text:
      type: string
    createdAt:
      type: string
  user:
    properties:
      userId:
        type: string
      username:
        type: string
      email:
        type: string
responses:
  success:
    description: success
  # created:
  #   description: Created
  # accepted:
  #   description: Accepted
  # badRequest:
  #   description: Bad Request
  #   examples:
  #     application/json:
  #       - message: Payload violates Schema
  #       - message: Payload Invalid
  # notFound:
  #   description: When resource is not found
  # internalServerError:
  #   description: Internal Server Error
